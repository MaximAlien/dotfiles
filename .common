# Colors
BLACK_COLOR="\033[0;30m"
BLUE_COLOR="\033[0;34m"
GREEN_COLOR="\033[0;32m"
CYAN_COLOR="\033[0;36m"
RED_COLOR="\033[0;31m"
PURPLE_COLOR="\033[0;35m"
BROWN_COLOR="\033[0;33m"
NO_COLOR="\033[m"

# Formatting
BOLD="\033[1m"
NO_BOLD="\033[0m"
REVERSE="\e[7m"
NO_REVERSE="\e[27m"

OS="$(uname)"
USER_NAME="$(whoami)"

# wc - word, line, character, and byte count
# xargs - construct argument list(s) and execute utility

# Functions
shell_startup() {
    if [[ $OS = "Darwin" ]]; then
        cd "/Users/$USER_NAME/Desktop"
    fi
    
    echo -e "${CYAN_COLOR}Starting ${SHELL}...${NO_COLOR}"

    chmod u+x ~/.shell/disk_info.swift
}

current_folder_info() {
    # h - when used with the -l option, use unit suffixes: Byte, Kilobyte, Megabyte, Gigabyte, Terabyte
    # a - include directory entries whose names begin with a dot
    # l - total sum for all the file sizes is output on a line before the long listing
    # t - sort by time modified
    # r - reverse the order of the sort to get reverse lexicographical order or the oldest entries first
    ITEMS_COUNT=$(ls -haltr $1 | wc -l)
    echo "Total number of items in current folder:${GREEN_COLOR}${ITEMS_COUNT}${NO_COLOR}." | xargs

    FILES_COUNT=$(find $1 -mindepth 1 -maxdepth 1 -type f | wc -l)
    echo "Total number of files in current folder:${GREEN_COLOR}${FILES_COUNT}${NO_COLOR}." | xargs

    FOLDERS_COUNT=$(find $1 -mindepth 1 -maxdepth 1 -type d | wc -l)
    echo "Total number of folders in current folder:${GREEN_COLOR}${FOLDERS_COUNT}${NO_COLOR}." | xargs
}

extended_list_directory() {
    FOLDER_PATH=$1
    if [[ -z "$FOLDER_PATH" ]]; then
        FOLDER_PATH=.
    fi

    ls -haltr $FOLDER_PATH
    current_folder_info $FOLDER_PATH
}

date_info() {
    ~/.shell/date_info.swift
}

disk_info() {
    ~/.shell/disk_info.swift
}

weather_info() {
    ~/.shell/weather_info.swift
}

color() {
    if [[ $# == 0 ]]; then
        echo "Example usage: $ color string_you_want_to_highlight ./your_command.sh"
        return
    fi

    QUERY="$1"
    shift

    SED="sed"
    if [[ $OS = "Darwin" ]]; then
        # sed which is used on macOS doesn't support ignore case. Fix is to install: $ brew install gnu-sed
        # I - ignore case
        # -E - enable support for extended regular expressions, where there will be no need to escape ( and )
        SED="gsed"
    fi

    "$@" | $SED -E "s#($QUERY)#$(echo -e $GREEN_COLOR)\1$(echo -e $NO_COLOR)#gI"
}

search_all() {
    if [[ $# == 0 ]]; then
        echo "Example usage: $ search string_you_are_looking_for"
        return
    fi

    SEARCH_TERM="$1"
    # To control maximum depth of the search use: -maxdepth 1
    FILE_SEARCH_RESULT=$(color $SEARCH_TERM find . -type f -iname "*$SEARCH_TERM*" -print)
    FILE_SEARCH_RESULT_COUNT=$(echo $FILE_SEARCH_RESULT | wc -l | xargs)

    if [[ $FILE_SEARCH_RESULT ]]; then
        echo "Found $GREEN_COLOR$REVERSE$FILE_SEARCH_RESULT_COUNT$NO_REVERSE$NO_COLOR files:\n$FILE_SEARCH_RESULT"
    else
        echo "No files were found which contain: $SEARCH_TERM."
    fi

    FOLDER_SEARCH_RESULT=$(color $SEARCH_TERM find . -type d -iname "*$SEARCH_TERM*" -print)
    FOLDER_SEARCH_RESULT_COUNT=$(echo $FOLDER_SEARCH_RESULT | wc -l | xargs)

    if [[ $FOLDER_SEARCH_RESULT ]]; then
        echo "Found $GREEN_COLOR$REVERSE$FOLDER_SEARCH_RESULT_COUNT$NO_REVERSE$NO_COLOR folders:\n$FOLDER_SEARCH_RESULT"
    else
        echo "No folders were found which contain: $SEARCH_TERM."
    fi

    # -s - silent mode
    # -i - ignore case
    # -I - ignore binary files
    # -n - show line number
    # -r - recursive
    CONTENT_SEARCH_RESULT=$(color $SEARCH_TERM grep -siInr "$SEARCH_TERM" *)
    CONTENT_SEARCH_RESULT_COUNT=$(echo $CONTENT_SEARCH_RESULT | wc -l | xargs)

    if [[ $CONTENT_SEARCH_RESULT ]]; then
        echo "Found $GREEN_COLOR$REVERSE$CONTENT_SEARCH_RESULT_COUNT$NO_REVERSE$NO_COLOR occurences in files content:\n$CONTENT_SEARCH_RESULT"
    else
        echo "No matches were found for: $SEARCH_TERM."
    fi
}

git_branch_info() {
    REPOSITORY_PATH="$(git rev-parse --show-toplevel 2> /dev/null)"
    # basename, dirname - return filename or directory portion of pathname
    REPOSITORY_NAME="$(basename "${REPOSITORY_PATH}")"
    GIT_STATUS="$(git status 2> /dev/null)"
    STATE="%B%F{76}clean%f%b"

    if [[ ! ${GIT_STATUS} =~ "nothing to commit, working tree clean" ]]; then
        STATE="%B%F{196}modified%f%b"
    fi

    PATTERN="On branch ([^[:space:]]*)"
    if [[ ${GIT_STATUS} =~ ${PATTERN} ]]; then
        GIT_BRANCH="%B%F{214}${match[1]}%f%b"
        echo " (%B%F{39}${REPOSITORY_NAME}%f%b/${GIT_BRANCH}/${STATE})"
    fi
}

reset_xcode() {
    killall Xcode
    xcrun -k
    xcodebuild -alltargets clean
    rm -rf "$(getconf DARWIN_USER_CACHE_DIR)/org.llvm.clang/ModuleCache"
    rm -rf "$(getconf DARWIN_USER_CACHE_DIR)/org.llvm.clang.$(whoami)/ModuleCache"
    rm -rf ~/Library/Developer/Xcode/DerivedData/*
    rm -rf ~/Library/Caches/com.apple.dt.Xcode/*
    rm -rf .build
    swift package reset
    swift package update
    open /Applications/Xcode.app
}

cleanup() {
    echo "Before cleanup:"
    disk_info

    echo "Performing cleanup..."
    
    # Remove Xcode cache
    rm -rf ~/Library/Developer/Xcode/DerivedData/*
    rm -rf ~/Library/Caches/com.apple.dt.Xcode/*

    # Remove CocoaPods cache
    rm -rf ~/Library/Caches/CocoaPods

    # Remove SPM cache
    rm -rf /Users/$USER_NAME/Library/Caches/org.swift.swiftpm/repositories

    # Remove Carthage cache
    rm -rf ~/Library/Caches/org.carthage.CarthageKit
    rm -rf ~/Library/Caches/carthage

    # Remove all contents from iOS Simulators and its cache
    xcrun simctl erase all
    xcrun simctl delete unavailable
    rm -rf ~/Library/Developer/CoreSimulator/Caches/dyld/

    # Remove Spotify cache
    rm -rf /Users/$USER_NAME/Library/Caches/com.spotify.client/Storage/*

    # Manually check:
    # $ /Users/maksimmakhun/Library/Developer/Xcode/iOS\ DeviceSupport

    echo "After cleanup:"
    disk_info
}

convert() {
    if [[ $# != 2 ]]; then
        echo "Example usage: $ convert conversion_file converted_file"
        return
    fi

    CONVERSION_FILE=$1
    LOWERCASED_CONVERSION_FILE=$(echo $CONVERSION_FILE | tr '[:upper:]' '[:lower:]')
    shift

    CONVERTED_FILE=$1
    LOWERCASED_CONVERTED_FILE=$(echo $CONVERTED_FILE | tr '[:upper:]' '[:lower:]')
    shift

    if [[ ${LOWERCASED_CONVERSION_FILE} == *.heic && ${LOWERCASED_CONVERTED_FILE} == *.jpg ]]; then
        /usr/local/bin/convert ${CONVERSION_FILE} ${CONVERTED_FILE}
    elif [[ ${LOWERCASED_CONVERSION_FILE} == *.pdf && ${LOWERCASED_CONVERTED_FILE} == *.jpg ]]; then
        /usr/local/bin/convert ${CONVERSION_FILE} ${CONVERTED_FILE}
    else
        echo "Unsupported file formats."
    fi
}