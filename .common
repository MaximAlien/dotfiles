# Colors
BLACK_COLOR="\033[0;30m"
BLUE_COLOR="\033[0;34m"
GREEN_COLOR="\033[0;32m"
CYAN_COLOR="\033[0;36m"
RED_COLOR="\033[0;31m"
PURPLE_COLOR="\033[0;35m"
BROWN_COLOR="\033[0;33m"
NO_COLOR="\033[m"

# Formatting
BOLD="\033[1m"
NO_BOLD="\033[0m"
REVERSE="\e[7m"
NO_REVERSE="\e[27m"

OS="$(uname)"
USER_NAME="$(whoami)"

# wc - word, line, character, and byte count
# xargs - construct argument list(s) and execute utility

# Functions
shell_startup() {
    if [[ $OS = "Darwin" ]]; then
        cd "/Users/$USER_NAME/Desktop"
    fi
    
    echo -e "${CYAN_COLOR}Starting ${SHELL}...${NO_COLOR}"
}

current_folder_info() {
    # h - when used with the -l option, use unit suffixes: Byte, Kilobyte, Megabyte, Gigabyte, Terabyte
    # a - include directory entries whose names begin with a dot
    # l - total sum for all the file sizes is output on a line before the long listing
    # t - sort by time modified
    # r - reverse the order of the sort to get reverse lexicographical order or the oldest entries first
    ITEMS_COUNT=$(ls -haltr $1 | wc -l)
    echo "Total number of items in current folder:${GREEN_COLOR}${ITEMS_COUNT}${NO_COLOR}." | xargs

    FILES_COUNT=$(find $1 -mindepth 1 -maxdepth 1 -type f | wc -l)
    echo "Total number of files in current folder:${GREEN_COLOR}${FILES_COUNT}${NO_COLOR}." | xargs

    FOLDERS_COUNT=$(find $1 -mindepth 1 -maxdepth 1 -type d | wc -l)
    echo "Total number of folders in current folder:${GREEN_COLOR}${FOLDERS_COUNT}${NO_COLOR}." | xargs
}

extended_list_directory() {
    FOLDER_PATH=$1
    if [[ -z "$FOLDER_PATH" ]]; then
        FOLDER_PATH=.
    fi

    ls -haltr $FOLDER_PATH
    current_folder_info $FOLDER_PATH
}

date_info() {
    ~/.shell/date_info.swift
}

disk_info() {
    ~/.shell/disk_info.swift
}

weather_info() {
    ~/.shell/weather_info.swift
}

color() {
    if [[ $# == 0 ]]; then
        echo "Example usage: $ color string_you_want_to_highlight ./your_command.sh"
        return
    fi

    QUERY="$1"
    shift

    SED="sed"
    if [[ $OS = "Darwin" ]]; then
        # sed which is used on macOS doesn't support ignore case. Fix is to install: $ brew install gnu-sed
        # I - ignore case
        # -E - enable support for extended regular expressions, where there will be no need to escape ( and )
        SED="gsed"
    fi

    "$@" | $SED -E "s#($QUERY)#$(echo -e $GREEN_COLOR)\1$(echo -e $NO_COLOR)#gI"
}

search_all() {
    if [[ $# == 0 ]]; then
        echo "Example usage: $ search string_you_are_looking_for"
        return
    fi

    SEARCH_TERM="$1"
    FILE_SEARCH_RESULT=$(color $SEARCH_TERM find . -type f -maxdepth 1 -iname "*$SEARCH_TERM*" -print)
    FILE_SEARCH_RESULT_COUNT=$(echo $FILE_SEARCH_RESULT | wc -l | xargs)

    if [[ $FILE_SEARCH_RESULT ]]; then
        echo "Found $GREEN_COLOR$REVERSE$FILE_SEARCH_RESULT_COUNT$NO_REVERSE$NO_COLOR files:\n$FILE_SEARCH_RESULT"
    else
        echo "No files were found which contain: $SEARCH_TERM."
    fi

    FOLDER_SEARCH_RESULT=$(color $SEARCH_TERM find . -type d -maxdepth 1 -iname "*$SEARCH_TERM*" -print)
    FOLDER_SEARCH_RESULT_COUNT=$(echo $FOLDER_SEARCH_RESULT | wc -l | xargs)

    if [[ $FOLDER_SEARCH_RESULT ]]; then
        echo "Found $GREEN_COLOR$REVERSE$FOLDER_SEARCH_RESULT_COUNT$NO_REVERSE$NO_COLOR folders:\n$FOLDER_SEARCH_RESULT"
    else
        echo "No folders were found which contain: $SEARCH_TERM."
    fi

    # -s - silent mode
    # -i - ignore case
    # -I - ignore binary files
    # -n - show line number
    # -r - recursive
    CONTENT_SEARCH_RESULT=$(color $SEARCH_TERM grep -siIn "$SEARCH_TERM" *)
    CONTENT_SEARCH_RESULT_COUNT=$(echo $CONTENT_SEARCH_RESULT | wc -l | xargs)

    if [[ $CONTENT_SEARCH_RESULT ]]; then
        echo "Found $GREEN_COLOR$REVERSE$CONTENT_SEARCH_RESULT_COUNT$NO_REVERSE$NO_COLOR occurences in files content:\n$CONTENT_SEARCH_RESULT"
    else
        echo "No matches were found for: $SEARCH_TERM."
    fi
}